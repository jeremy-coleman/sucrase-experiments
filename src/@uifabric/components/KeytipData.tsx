import { IBaseProps, IRenderComponent, mergeAriaAttributeValues } from "@uifabric/styleguide"
import * as React from "react"
import { IKeytipProps } from "./Keytip"
import { getAriaDescribedBy, KeytipManager, mergeOverflows, sequencesToID } from "./KeytipManager"

/**
 * A small element to help the target component correctly read out its aria-describedby for its Keytip
 * {@docCategory Keytips}
 */
export class KeytipData extends React.Component<IKeytipDataProps & IRenderComponent<{}>, {}> {
  private _uniqueId: string
  private _keytipManager: KeytipManager = KeytipManager.getInstance()

  public componentDidMount() {
    // Register Keytip in KeytipManager
    if (this.props.keytipProps) {
      this._uniqueId = this._keytipManager.register(this._getKtpProps())
    }
  }

  public componentWillUnmount() {
    // Unregister Keytip in KeytipManager
    this.props.keytipProps && this._keytipManager.unregister(this._getKtpProps(), this._uniqueId)
  }

  public componentDidUpdate() {
    // Update Keytip in KeytipManager
    this.props.keytipProps && this._keytipManager.update(this._getKtpProps(), this._uniqueId)
  }

  public render(): JSX.Element {
    const { children, keytipProps, ariaDescribedBy } = this.props
    let nativeKeytipProps: any = {}
    if (keytipProps) {
      nativeKeytipProps = this._getKtpAttrs(keytipProps, ariaDescribedBy)
    }
    return children(nativeKeytipProps)
  }

  private _getKtpProps(): IKeytipProps {
    return {
      disabled: this.props.disabled,
      ...this.props.keytipProps!
    }
  }

  /**
   * Gets the aria- and data- attributes to attach to the component
   * @param keytipProps - props for Keytip
   * @param describedByPrepend - ariaDescribedBy value to prepend
   */
  private _getKtpAttrs(keytipProps: IKeytipProps, describedByPrepend?: string): any {
    if (keytipProps) {
      // Add the parent overflow sequence if necessary
      const newKeytipProps = this._keytipManager.addParentOverflow(keytipProps)

      // Construct aria-describedby and data-ktp-id attributes and return
      const ariaDescribedBy = getAriaDescribedBy(newKeytipProps.keySequences)
      let keySequences = [...newKeytipProps.keySequences]
      if (newKeytipProps.overflowSetSequence) {
        keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence)
      }
      const ktpId = sequencesToID(keySequences)

      return {
        "aria-describedby": mergeAriaAttributeValues(describedByPrepend, ariaDescribedBy),
        "data-ktp-target": ktpId,
        "data-ktp-execute-target": ktpId
      }
    }
    return undefined
  }
}

export interface IKeytip {}

export interface IKeytipDataProps extends IBaseProps<IKeytip> {
  /**
   * IKeytipProps to create from this KeytipData
   * If no keytipProps are defined, a keytip won't be registered
   */
  keytipProps?: IKeytipProps

  /**
   * String to add to the aria-describedby generated by this KeytipData
   * It will prepend this string to the generated aria-describedby property
   */
  ariaDescribedBy?: string

  /**
   * T/F if this keytip should be disabled upon creation
   */
  disabled?: boolean
}
